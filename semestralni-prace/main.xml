<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="sproject_sql_html.xsl"?>
<!--<!DOCTYPE sproject_sql PUBLIC "-//XMLmind//DTD Sproject_sql//EN" "http://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/sprojekt/sproject_sql.dtd"> -->
<!DOCTYPE sproject_sql PUBLIC "-//XMLmind//DTD Sproject_sql//EN"
"sproject_sql.dtd">
<sproject_sql>
  <course>
    <cname>Jazyk SQL</cname>

    <code>BI-SQL</code>

    <semester>letní semestr 2013/2014</semester>

    <seminar>den a čas vašeho cvičení</seminar>
  </course>

  <author>
    <aname>vaše jméno</aname>

    <uname>vaše uživatelské jméno</uname>

    <email>váš email</email>
  </author>

  <content>
    <declaration>Prohlašuji, že jsem svou semestrální práci vypracoval samostatně. Všechny zdroje, ze kterých jsem
    čerpal, jsou uvedeny v části Odkazy.</declaration>

    <title>Název vaší semestrální práce</title>

    <description>
      <title>Popis</title>

      <title2>Charakteristika projektu</title2>

      <para>Stručná slovní charakteristika vašeho projektu (několik odstavců), kde popíšete "realitu", kterou budete ve
      vaší semestrálce databázově modelovat. Výhodným je navázat na semestrální práci bakalářského předmětu DBS.</para>
<para>Stručná slovní charakteristika rozšíření schématu o hierarchickou strukturu, umožňující rekurzivní dotazování</para>
      <comment><para>K O M E N T Á Ř E 

Tohle je komentář k 1. odstavci popisu semestrální práce.
           Komentář zobrazuje text tak, jak jej napíšete, zachovává formátování.

Zobrazení komentářů si můžete VYPNOUT 
   - v menu XML Mind Editoru View -&gt;   Hide comments
   - při html zobrazení tlačítkem "Vypnout/zapnout zobrazeni komentaru" přímo na html stránce.

Komentář můžete používat k vlastním poznámkám k částem práce, dále jej může využít váš cvičící k tomu, 
aby připojil svoje hodnocení k jednotlivým částem práce.

Komentovat lze samostatně:
           jednotlivé odstavce textů v částech Popis, Datové schéma, Skripty, Závěr, Odkazy 
           případný obrázek datového schématu
           jednotlivé SQL příkazy
           tabulku pokrytí kategorií SQL příkazů
          popis procedurálního rozšíření
          jednotlivé procedurální moduly, jejich implementaci a testování

Další informace o semestrální práci, struktuře, požadavcích a termínech jsou uvedeny 
formou komentářů přímo v tomto dokumentu.</para></comment>

      <title2>Popis návrhu procedurálního rozšíření</title2>

      <para>Textová specifikace procedurálního rozšíření, která bude podkladem pro doplnění relačního schématu o objekty
      procedurálniho typu (package tvořící API rozhraní bussiness logiky systému, pracujícího nad Vaším úložištěm
      (podporogramy, triggery):</para>

      <para>- povinnou součástí práce je modul pro vygenerování velkého množství pseudonáhodných testovacích dat</para>

      <para>- například realizujte kontrolu dodatečně formulovaného složitějšího integritního omezení pomocí
      databázových triggerů, které volaji uložené databázové procedury a funkce</para>

      <para>- například dopňte do schématu tabulku/tabulky s odvozenými hodnotami a pomocí procedurálních DB objektů
      zajistí jednorázové přepočítání odvozených hodnot z prvotních údajů</para>

      <para>- například realizujte kontrolu dodatečně formulovaného složitějšího integritního omezení pomocí
      databázových triggerů, které volaji uložené databázové procedury a funkce</para>

      <comment><para>S T R U K T U R A   S E M E S T R Á L N Í  P R Á C E 

Semestrálka má tyto části: 
1. hlavička (údaje o vás a o čase cvičení, prohlášení o autorství, název práce) 

2. popis 
   2.1 stručná slovní charakteristika vašeho projektu (několik odstavců), kde popíšete "realitu", 
          kterou budete ve vaší semestrálce databázově modelovat. 
          Výhodným je navázat na semestrální práce předmětu BI-DBS. 
   2.2. textová specifikace procedurálního rozšíření, která bude podkladem pro doplnění relačního schématu 
          o objekty procedurálniho typu (package tvořící API rozhraní bussiness logiky systému, 
          pracujícího nad Vaším úložištěm (podporogramy, triggery):
         *například realizujte kontrolu dodatečně formulovaného složitějšího integritního omezení pomocí 
           databázových triggerů, které volaji uložené databázové procedury a funkce,
        *například dopňte do schématu tabulku/tabulky s odvozenými hodnotami a pomocí procedurálních 
          DB objektů zajistí jednorázové přepočítání odvozených hodnot z prvotních údajů,
        *například zevrubně prozkoumejte datové schéma svého úložiště a z výskytu smyček ve schématu 
          vytypuje případné zdroje nekonzistencí, formulujte integritní omezení a zrealizuje jeho procedurální kontroly, 
         které budou vzniku těchto potenciálních datových nekonzistencí účinně bránit.
         *napríklad něco podobného.
   2.3.
3. datové schéma úložiště
   3.1 Obrázek relačního schématu (převzato z předmětu DBS) 
   3.2 Diskuse k datovému schématu zahrnuje výčet integritních omezení, které nebylo možné zahrnout do obrázku. 
       Jsou-li ve schématu smyčky, diskutujte, zda smyčka je potenciálním zdrojem datové nekonzistence
   3.3. SQL script pro vytvoření relačního db schématu

4. PLSQL modul, který automaticky naplní tabulky schématu větším množstvím konzistentních dat. 
    V modulu budou vedle příkazů "Insert ... Values" také použity příkazy "Insert ... Select" pro naplnění tabulek, 
    které budou obrazem typu vztahu M:N. Vložíme tak do tabulky výsledek spojení (JOIN) tabulek, 
    které jsou obrazem účastníků typu vztahu ("vztahových" tabulek) a dle potřeby také Update a Delete. 

5. deset databázových dotazů, které předjímají použití SQL v celém rozsahu jeho výrazových prostředků (z původních 25 dotazů vyberete ty reprezentativní)
   Pro každý dotaz:
   5.1 formulace v přirozeném jazyku 
   5.2 první verze 
        5.2.1. formulace v relačním SQL
        5.2.1. exekuční plán
        5.2.2. odezva 
        5.2.3. diskuse, ve které bude konstatováno, že odpověď na dotaz odpovídá očekávání autora dotazu v přirozeném jazyku 
        5.2.4. diskuse k efektivnosti exekučního plánu, ze které vyplyne změna exekučního plánu:
              * přidání indexů na sloupci, podle kterých se dotazuje a spojuje
              * dotaz lze formulovat syntakticky jinak a tudíž s jiným (lepším/horším) plánem provedení
              * změny vstupů pro optimalizátor, například přidáním indexů, přidáním materializovaných  pohledů, sběrem podrobnějších statistik
        5.2.5. Případné přidání vytipovaných indexů a zopakování první verze dotazu, do protokolu semestrálky pak přijde nový exekuční plán    
   5.3 druhá verze 
       5.3.1. formulace v relačním SQL
        5.3.2. exekuční plán
        5.3.3. odezva 
        5.3.3. diskuse, ve které bude konstatováno, že odpověď na dotaz odpovídá očekávání autora dotazu v přirozeném jazyku 
        5.3.4. diskuse porovnávající efektivnost obou dotazů

6. tabulka pokrytí požadovaných kategorií složitosti dotazů

7. procedurální rozšíření 
   Pro každý procedurální objekt:
   7.1. specifikace
   7.2. zdrojový text
   7.3. slovní specifikace struktury testu pro ověření fukčnosti o n krocích
        n-tý krok testu:
        - podívám se na současný stav relevantního fragmentu dat před testem
        - provedu pokus o provedení toho a toho ukonu, po provedeni očekávám, že v databázi nastanou ty a ty změny/pokus 
          bude odmitnut z toho a toho důvodu
        - pro ověření se podívám na stav relevantního fragmentu dat po akci,
   7.4 záznam (log) výstupu z proběhlého testu
   7.5 diskuse k výsledku testu a případnému ladění
   7.6 konstatování, že test ověřil správnou funkčnost

10. Celkový SQL script, obsahující zdrojové texty všech bodů 
   
10. Závěr

11. Odkazy na použité zdroje informací</para></comment>

      <comment><para>T E C H N O L O G I E   A  N Á S T R O J E   
   Semestrální práci odevzdáte ve formě XML dokumentu, který nahrajete do vašeho projektového adresáře na
   serveru service.felk.cvut.cz. Do tohoto adresáře umístíte také všechny zdrojové souboru a obrázek datového schématu.


UMÍSTĚNÍ PRÁCE:
   https://webdev.fit.cvut.cz/&lt;vase_uzivatelske_jmeno&gt; /BI-SQL

STRUKTURA DOKUMENTU:
   Odevzdaná práce (XML dokument) nechť je validní dle specifikace sprojekt. Na adrese:
   <link url="https://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/sprojekt">https://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/sprojekt/</link>
   najdete specifikace ve formátu DTD, XML Schema, Relax NG (sprojekt.dtd, sprojekt.xsd, sprojekt.png).
   Pro editaci práce tedy lze použít libovolný XML editor.
   Kompletní podpora pro formátování semestrálky (šablony a ukázkové semestrálky) 
   pro kompletní offline práci je:
<link url="http://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/sprojekt.zip">http://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/sprojekt.zip</link>

TVORBA DOKUMENTU (semestrálky)
   Pokud použijete jiný editor než XML Mind (viz níže), doporučuji stáhnout si šablonu pro semestrálku z SQL,
      <link url="https://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/main.xml">https://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/main.xml</link>
   tu otevřít a vyplnit vlastním textem vaší semestrální práce.
   Pokud toto neuděláte, pak je třeba, aby váš nově vytvořený dokument odkazoval na formátovací šablonu 
   pro zobrazení v html podobě. Za specifikaci kódování v XML souboru:
   &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  je třeba umístit tuto instrukci pro provedení:
&lt;?xml-stylesheet type="text/xsl" href="hhttps://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/sprojekt_html.xsl"?&gt;


EDITOR XML MIND - DOPORUČUJI PRO TVORBU SEMESTRÁLKY
Home Edition tohoto nástroje je volně ke stažení pro platformy linux i windows:
<link url="http://www.xmlmind.com/xmleditor/download.shtml">http://www.xmlmind.com/xmleditor/download.shtml</link>
Až si ho stáhnete a nainstalujete a spustíte, doinstalujte si podporu dokumentu sprojekt (tvorba semestrálky):

Instalace balíku "sprojekt" (šablony pro semestrálku z SQL) v XML Mind
 Options -&gt; Preferences... -&gt; Install add-ons
           do okna "Download add-ons from this servers"
               přidat adresu: 
         http://service.felk.cvut.cz/courses/X36SQL/xml/sprojekt.xxe_addon
 Options -&gt; Install Add-ons...
      Načtou se informace o balících, tam najdete balík "SQL Semestralni prace"

Po dokončení instalace je třeba XML Mind restartovat. 
Po dalším spuštění se vám přes volbu File -&gt; New... v nabídce existujících formátů objeví nabídka:
 SQL Semestral Work Documentation 
a vy si můžete vybrat, zda si otevřete šablonu kam doplníte vlastní text semestrálky 
(A Template For Semestral Work With Comments) nebo vzorovou semestrálku s komentáři 
(Sample of Semestral Work), což přesně tento dokument.</para></comment>
    </description>

    <data_model>
      <title>Schéma datového úložiště (relační)</title>

      <dm_picture>
        <mediaobject>
          <imageobject>
            <imagedata fileref="https://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/Katedra-ucitel-predmet-semestr-relacni.png" />
          </imageobject>
        </mediaobject>
      </dm_picture>

      <title2>Diskuse datového schématu a popis integritních omezeni</title2>

      <comment><para>Diskuse k datovému schématu, která zahrnuje výčet integritních omezení, která nebylo možné zahrnout do obrázku.</para></comment>

      <para>Mezi typy KATEDRA a PREDMET vedou tři spojnice. První říká, že katedra je vlastníkem předmětu. Druhá větev
      vyjadřuje vztah "Katedra má mnoho učitelů, kteří mohou být garanty mnoha předmětů. Smyčka definuje pravidlo, že
      garant předmětu může být z katedry, na kterou on sám nepatří.Platí ovšem vnitropodnikové pravidlo, které říká, že
      garant předmětu musí patřit na katedru, která předmět vlastní.</para>

      <para>IO1: Garant předmětu musí být z katedry, která předmět vlastní, budeme kontrolovat v procedurální
      nadstavbě</para>

      <para>Mezi typy UCITEL a VYPSANY_PREDMET vedou dvě spojnice přes PREDMET a přes SEZNAM_UCITELU _PREDMETU. Nechť
      platí vnitropodnikévé pravidlo, že učitel, který je garantem předmětu musí přednášet ve vypsané instanci tohoto
      předmětu. To ta smyčka negarantuje.</para>

      <para>IO2: Učitel, který je garantem předmětu musí přednášet ve vypsané instanci tohoto předmětu.</para>

      <para>Mezi typy KATEDRA a PREDMET vedou tři spojnice. První říká, že katedra je vlastníkem předmětu. Třetí větev
      vyjadřuje vztah "Učitelé dané katedry jsou učiteli ve vypsaných instancích mnoha předmětů. Smyčka připouští, aby u
      vypsané instance předmětu učili i učitelé z jiné katedry, než je ta, která předmět vlastní. Toto je ovšem v
      souladu s příslušným vnitropodnikovým pravidlem.</para>

      <para>IO3: U vypsané instance předmětu mohou učit i učitelé z jiné katedry, než je ta, která předmět vlastní. Zde
      tedy není co kontrolovat.</para>

      <para>Fragment v červeném oválu představuje rozšíření schématu pro potřebu rekurze. 
            Předmět může mít mnoho prerekvizit a může být prerekviztou mnoha předmětů</para>

      <title2>SQL script pro vytvoření relačního db schématu</title2>

      <para>
        <link url="https://users.fit.cvut.cz/~halaska/BI-SQL/Cviceni5/celkovy_script_pro_stvoreni_schematu_vcetne_naplneni_dat.sql.html">Odkaz
        na skript</link>
      </para>
    </data_model>

    <filling_rel>
      <title>PLSQL modul pro naplnění tabulek velkým množstvím testovacích dat</title>

      <para>V modulu budou vedle příkazů Insert ... Values také použity příkazy Insert ... Select pro naplnění tabulek,
      které budou obrazem typu vztahu M:N. Vložíme tak do tabulky výsledek náhodného spojení tabulek, které jsou obrazem
      účastníků typu vztahu ("vztahových" tabulek) a dle potřeby také Update a Delete.</para>

      <comment><para>V modulu budou vedle příkazů 
Insert ... Values 
také použity příkazy
Insert ... Select 
pro naplnění tabulek, které budou obrazem typu vztahu M:N.
Vložíme tak do tabulky výsledek náhodného spojení tabulek, 
které jsou obrazem účastníků typu vztahu ("vztahových" tabulek) a dle potřeby také Update a Delete.
Aby následná optimalizace dotazů měla smysl, je nutné mít v tabulkách řádově stovky až tisíce řádků.  
Testovací data nemusí odpovídat realitě, namísto Alíka, Reka a Punťa nám stačí Pes1, Pes2 až Pes 1000
Transakce musí být vždy, tedy i v této proceduře, co nejkratší.
V SQL Developer lze před spuštěním procedury, plnící data zapnout AUTOCOMMIT.</para></comment>

      <para>
        <link url="http://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/demo_napln_data_celkovy_script.sql">Odkaz na
        skript pro vytvoření API</link>
      </para>

      <para>
        <link url="http://users.fit.cvut.cz/~halaska/BI-SQL/semestralka/demo_spousteci_davka.sql">Odkaz na spouštěcí
        dávku</link>
      </para>
    </filling_rel>

    <queries>
      <title>10 SQL dotazů dle specifikované složitosti</title>

      <query query_id="q_1">
        <title2>Dotaz 1</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          Select něco, ... From Něco Join Něco Where ...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          <link url="./ex_plany/test.html"> plán</link> je v samostatném html souboru exportovaném z SQLDevelopera verze 3.1
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
Execution Plan
----------------------------------------------------------
Plan hash value: 919050303

--------------------------------------------------------------------------------
------------

| Id  | Operation                    | Name        | Rows  | Bytes | Cost (%CPU)
| Time     |

--------------------------------------------------------------------------------
------------

|   0 | SELECT STATEMENT             |             |   106 | 20034 |     3   (0)
| 00:00:01 |

|   1 |  NESTED LOOPS                |             |       |       |
|          |

|   2 |   NESTED LOOPS               |             |   106 | 20034 |     3   (0)
| 00:00:01 |

|   3 |    TABLE ACCESS FULL         | EMPLOYEES   |   107 | 14231 |     3   (0)
| 00:00:01 |

|*  4 |    INDEX UNIQUE SCAN         | DEPT_ID_PK  |     1 |       |     0   (0)
| 00:00:01 |

|   5 |   TABLE ACCESS BY INDEX ROWID| DEPARTMENTS |     1 |    56 |     0   (0)
| 00:00:01 |

--------------------------------------------------------------------------------
------------


Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("EMPLOYEES"."DEPARTMENT_ID"="DEPARTMENTS"."DEPARTMENT_ID")

Note
-----
   - dynamic sampling used for this statement (level=2)


Statistics
----------------------------------------------------------
          0  recursive calls
          0  db block gets
        130  consistent gets
          0  physical reads
          0  redo size
       8736  bytes sent via SQL*Net to client
        441  bytes received via SQL*Net from client
          9  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
        106  rows processed
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>
      </query>

      <query  query_id="q_2">
        <title2>Dotaz 2</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
      <dm_picture>
        <mediaobject>
          <imageobject>
            <imagedata fileref="./ex_plany/query-plan-picture1.png" />
          </imageobject>
        </mediaobject>
      </dm_picture>
         
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          result
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>

      </query>

      <query  query_id="q_3">
        <title2>Dotaz 3</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          result
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          result
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>
      </query>

      <query  query_id="q_4">
        <title2>Dotaz 4</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          result
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          result
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>
      </query>

      <query query_id="q_5">
        <title2>Dotaz 5</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>
      </query>

      <query query_id="q_6">
        <title2>Dotaz 6</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>
      </query>

      <query query_id="q_7">
        <title2>Dotaz 7</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>

        <para>Porovnání obou variant z hlediska formulace dotazu a efektivnosti plánů.</para>
      </query>

      <query query_id="q_8">
        <title2>Dotaz 8</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>

        <para>Porovnání obou variant z hlediska formulace dotazu a efektivnosti plánů.</para>
      </query>

      <query  query_id="q_1">
        <title2>Dotaz 9</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          <para>set autotrace on

AutoTrace Enabled
select RC,PRIJMENI,JMENO from HALASKA.AUTORI


RC  PRIJMENI  JMENO                                                                                                                            
--  --------  -----                                                                                                                            

0 rows selected
Plan hash value: 2085940515
 
----------------------------------------------------------------------------
| Id  | Operation         | Name   | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |        |     1 |    43 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS FULL| AUTORI |     1 |    43 |     2   (0)| 00:00:01 |
----------------------------------------------------------------------------

   Statistics
-----------------------------------------------------------
               0  recursive calls
               0  db block gets
               3  consistent gets
               0  physical reads
               0  redo size
               0  total read fandles
               0  read fandles in use
               0  fandle allocation failures
               0  parse count (hard)
               0  parse count (failures)
</para>
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          <para><link url="???">link</link></para>
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>

        <para>Porovnání obou variant z hlediska formulace dotazu a efektivnosti plánů.</para>
      </query>

      <query query_id="q_10">
        <title2>Dotaz 10</title2>

        <para>Formulace v přirozeném jazyku.</para>

        <title3>První verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Návrh navození podmínek pro změnu exekučního plánu.</para>

        <title3>Druhá verze</title3>

        <title4>SQL</title4>

        <sql>
          select...
        </sql>

        <title4>Exekuční plán</title4>

        <ex_plan>
          plán
        </ex_plan>

        <title4>Výsledek dotazu</title4>

        <sql_result>
          RESULT
        </sql_result>

        <title4>Diskuse 1</title4>

        <para>Neodpovídá očekávané odezvě.</para>

        <title4>Diskuse 2</title4>

        <para>Porovnání obou dotazů (plánů) z hlediska efektivnosti.</para>

        <para>Porovnání obou variant z hlediska formulace dotazu a efektivnosti plánů. Pokryta dotazy číslo.</para>
      </query>
    </queries>

    <queries_cover>
      <query_cat>
        <cat_id>A</cat_id>

	<cat_link> <link url="#q_1">q_1</link>  <link url="#q_2">q_2</link> <link url="#q_3">q_3</link></cat_link>

        <cat_description>pozitivní dotaz nad spojením alespoň dvou tabulek (Seznam kateder - id, název, jejichž učitelé učil/učili
        v předmětech, které garantuje katedra KKKK), ("vyber seznam se jmény a adresami pacientů, kteří byli vyšetřováni
        Mudr. Čermákem" )</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>B</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>negativní dotaz nad spojením alespoň dvou tabulek (seznam semestrů - id, název, ve kterých NEzkoušel
        nikdo z katedry Zubních trhaček), ("seznam se jmény a adresami pacientů, kteří nenavštívili lékaře Mudr.
        Čermáka" ).</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>C</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>Vyber ty, kteří mají vztah POUZE k ...(vyber seznam kateder učitelů, kteří učí/učili POUZE v letních
        semestrech), (# "seznam se jmény a adresami pacientů, kteří navštívili pouze Mudr. Čermáka =navštívili doktora
        Čermáka a nenavštívili žádného jiného lékaře)</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>D</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>Vyber ty, které jsou ve vztahu se všemi - dotaz s univerzální kvantifikací (seznam učitelů - id, jmeno,
        prijmeni, titul, kteří přednášeli ve VŠECH semestrechpočínaje zimním semestrem 2001/2002 až do letního semestru
        2007/2008 včetně),("seznam mény a adresami lékařů, které navštívíli VŠICHNI pacienti, kteří někdy navštívili
        Mudr. Čermáka")</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>E1</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>spojení - CROSS JOIN</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>E2</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>spojení - JOIN ON</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>E3</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>spojení - JOIN USING</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>E4</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>plné (vnější) spojení - FULL OUTER JOIN</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>E5</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>vnější polospojení - {LEFT | RIGHT} OUTER JOIN</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>F1</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>vnořený poddotaz v klauzuli WHERE</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>G1</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>vnořený poddotaz v klauzuli SELECT</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>G2</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>vnořený poddotaz v klauzuli FROM</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>G3</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>vztažený vnořený poddotaz (použijte v poddotazech EXISTS | NOT EXISTS)</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>H</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>množinové sjednocení - UNION, UNION ALL, rozdíl - EXCEPT (MINUS v Oracle), průnik - INTERSECT</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>I</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>agregační funkce (count | sum | min | max| avg) nad seskupenými řádky - GROUP BY (HAVING)</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>J</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>vytvoření pohledu VIEW a dotaz nad ním</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>K</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>INSERT .... SELECT příkaz</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>L</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>UPDATE s vnořeným SELECT příkazem</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>M</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>DELETE s vnořeným SELECT příkazem</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>N</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>SELECT jako příkazový blok WITH</cat_description>
      </query_cat>

      <query_cat>
        <cat_id>O</cat_id>

        <cat_link> <link url="#q_1">q_1</link></cat_link>

        <cat_description>rekurzivní, resp hierarchický dotaz</cat_description>
      </query_cat>
    </queries_cover>

    <proc_objects>
      <title>Procedurální rozšíření</title>

      <proc_object>
        <title3>1. Modul Napln data</title3>

        <para>Vymažeme data ze všech tabulek a znovu je naplníme prvotními daty.</para>

        <title4>Zdrojový text modulu</title4>

        <proc_sql>
set ECHO on
set serveroutput on size unlimited
--------------------------------------------------------
--  File created - Sobota-únor-12-2011   
--------------------------------------------------------
-------------------------------------------------------
--  DDL for Procedure DUMP_BULK_EXCEPTIONS
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE DUMP_BULK_EXCEPTIONS 
as
-----------------------------------------------------------
--  created - Sobota-únor-12-2011   Ivan Halaska
-- upravy:
-- procedura se vola ze sekcí EXCEPTION, 
-- vydumpuje na konzoli obsah pole sql%bulk_exceptions 
-- v pripade vyskytu chyby pri FORALL insert
-- zpusob pouziti:
------------------------------------
-- exception
--  when NAPLN_DATA.DML_ERRORS then DUMP_BULK_EXCEPTIONS;
------------------------------------
-----------------------------------------------------------
begin
     dbms_output.put_line('Number of errors is ' || sql%bulk_exceptions.count );
      for I in 1 .. 100 --sql%bulk_exceptions.count
      loop
        DBMS_OUTPUT.PUT_LINE
        ('Error ' || i || ' occurred during '||'iteration ' 
        || sql%BULK_EXCEPTIONS(I).ERROR_INDEX);
        DBMS_OUTPUT.PUT_LINE('Oracle error is ' || SQLERRM(-sql%BULK_EXCEPTIONS(I).ERROR_CODE));
      end loop;
end dump_bulk_exceptions;
/
--------------------------------------------------------
--  DDL for Procedure VYPNI_CIZI_KLICE
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE VYPNI_CIZI_KLICE is
  begin
   for CUR in (select CONSTRAINT_NAME , TABLE_NAME 
               from USER_CONSTRAINTS
               where CONSTRAINT_TYPE = 'R' ) LOOP
   execute immediate 'ALTER TABLE '||cur.table_name||' MODIFY CONSTRAINT "'||cur.constraint_name||'" DISABLE ';
   end LOOP;
end VYPNI_CIZI_KLICE;
/
--------------------------------------------------------
 --  DDL for Procedure ZAPNI_CIZI_KLICE
--------------------------------------------------------
 CREATE OR REPLACE PROCEDURE ZAPNI_CIZI_KLICE is
begin
     for CUR in (select CONSTRAINT_NAME , TABLE_NAME 
                 from USER_CONSTRAINTS
                 where CONSTRAINT_TYPE = 'R' ) LOOP
       execute immediate 'ALTER TABLE '||cur.table_name||' MODIFY CONSTRAINT "'||cur.constraint_name||'" ENABLE ';
     end LOOP;
end ZAPNI_CIZI_KLICE;
/
--------------------------------------------------------
--  DDL for Package NAPLN_DATA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE NAPLN_DATA 
is
    C_POCET_KATEDER CONSTANT  SIMPLE_INTEGER:=20;
    C_POCET_UCITELU CONSTANT  SIMPLE_INTEGER:=700;
    C_POCET_PREDMETU CONSTANT  SIMPLE_INTEGER:=1000;
-- tuto vyjimku vyuzivaji procedury pro plneni jednotlivych tabulek
    dml_errors EXCEPTION;
    PRAGMA EXCEPTION_INIT(DML_ERRORS, -24381);
-- vytvor public synonumum dump_bulk_exceptions
procedure NAPLN_VSECHNY_TABULKY;
function POCET_ucitelu return PLS_INTEGER;
end NAPLN_DATA;
/
--------------------------------------------------------
--  DDL for Package Body NAPLN_DATA
--------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY NAPLN_DATA
is 
--------------------------------------------------------
--  created - Sobota-únor-12-2011   Ivan Halaska
-- upravy:
--------------------------------------------------------
   function POCET_UCITELU return PLS_INTEGER is
      begin 
             return C_POCET_UCITELU;
   end POCET_UCITELU;
--   
--
   procedure NAPLN_VSECHNY_TABULKY is
      begin
-- procedura postupne zavola procedury pro plneni tabulek DEMO schematu
-- procedury je nutne volat ve zde uvedenem poradi.
-- zatim jsou procedury lokalni, pozadeji je vlozim do balicku
-----------------------------------------------------------------------------------------------------------------
-- vyprazdni tabulky
-- aby bylo mozne tabulky vyprazdnit, je nutne vypnout kontrolu referencnich cizich klicu
-----------------------------------------------------------------------------------------------------------------
      DEMO_NAPLN_SEMESTRY;
      DEMO_NAPL_KATEDRY;
      DEMO_NAPLN_UCITELE;
      DEMO_NAPLN_PREDMETY;
      DEMO_NAPLN_VYPSANE_PREDMETY;
      DEMO_NAPLN_VYUCUJICI_PREDMETU;
      NAPLN_VSECHNY_TABULKY;
-- opatri tabulky statistikami
      DBMS_STATS.GATHER_SCHEMA_STATS(OWNNAME =&gt; user,ESTIMATE_PERCENT =&gt; 100);
end NAPLN_VSECHNY_TABULKY;
end NAPLN_DATA;
/
--------------------------------------------------------
--  DDL for Procedure DEMO_NAPLN_SEMESTRY
--------------------------------------------------------
  CREATE OR REPLACE PROCEDURE DEMO_NAPLN_SEMESTRY AS 
-- created - Sobota-únor-12-2011 Ivan Halaska
-- dalsi upravy:
BEGIN
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(091, 'Zimní semestr 2009/10');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(101, 'Zimní semestr 2010/11');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(111, 'Zimní semestr 2011/12');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(121, 'Zimní semestr 2012/13');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(131, 'Zimní semestr 2013/14');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(141, 'Zimní semestr 2014/15');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(151, 'Zimní semestr 2015/16');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(161, 'Zimní semestr 2016/17');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(171, 'Zimní semestr 2017/18');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(181, 'Zimní semestr 2018/19');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(191, 'Zimní semestr 2019/20');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(201, 'Zimní semestr 2020/21');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(211, 'Zimní semestr 2021/22');
-- letni semestry
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(092, 'Letní semestr 2009/10');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(102, 'Letní semestr 2010/11');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(112, 'Letní semestr 2011/12');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(122, 'Letní semestr 2012/13');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(132, 'Letní semestr 2013/14');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(142, 'Letní semestr 2014/15');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(152, 'Letní semestr 2015/16');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(162, 'Letní semestr 2016/17');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(172, 'Letní semestr 2017/18');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(182, 'Letní semestr 2018/19');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(192, 'Letní semestr 2019/20');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(202, 'Letní semestr 2020/21');
INSERT INTO  DEMO_SEMESTR(SEMESTR_ID, NAZEV_SEMESTRU) VALUES(212, 'Letní semestr 2021/22');
commit;
DBMS_OUTPUT.PUT_LINE('tabulka DEMO_SEMESTR naplněna testovacími daty');
END DEMO_NAPLN_SEMESTRY;
/
--------------------------------------------------------
  CREATE OR REPLACE PROCEDURE DEMO_NAPL_KATEDRY 
is
--------------------------------------------------------
--  created - Sobota-únor-12-2011   Ivan Halaska
-- upravy: 
--
-- procedura naplni testovaci data do tabulky DEMO_KATEDRA. 
-- Procedura probehne  pouze tehdy, je-li tabulka prazdna
--------------------------------------------------------
type T_KATEDRY  is table of DEMO_KATEDRA%ROWTYPE index by PLS_INTEGER;
V_KATEDRY                    T_KATEDRY;
V_KATEDRY_PRAZDNE  T_KATEDRY;
v_pom pls_integer;
begin
select COUNT(*) into V_POM from DEMO_KATEDRA;
if V_POM &gt; 0 then
   DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_KATEDRA není prázdná, končím');
   return;
end if;
for V_PAR  in 1..napln_data.C_POCET_KATEDER LOOP
V_KATEDRY(V_PAR).NAZEV_KATEDRY :=  'Katedra '||to_char(1800+V_PAR);
V_KATEDRY(V_PAR).katedra_id:=1800+V_PAR;
end LOOP;
-------------------------------------------------------------------------
/* pro kontrolu lze vypsat
for I in 1 ..V_KATEDRY.COUNT LOOP
if V_KATEDRY.exists(I) then
DBMS_OUTPUT.PUT_LINE(V_KATEDRY(I).KATEDRA_ID||' '||V_KATEDRY(I).NAZEV_KATEDRY);
end if;
end LOOP;
DBMS_OUTPUT.PUT_LINE('Kateder je '||V_KATEDRY.count);
*/
-------------------------------------------------------------------------
----- uloz obsah pole do tabulky UCITEL
 begin
 for X in V_KATEDRY.first ..V_KATEDRY.last  LOOP
        insert into DEMO_KATEDRA values  V_KATEDRY(X) ;
        commit;
 end LOOP;
select COUNT(*) into V_POM from DEMO_KATEDRA;
DBMS_OUTPUT.PUT_LINE('Do tabulky DEMO_KATEDRA bylo vloženo '||V_POM||' řádků');
exception
  when NAPLN_DATA.DML_ERRORS then DUMP_BULK_EXCEPTIONS;
end;
-- uklidim
V_KATEDRY := V_KATEDRY_PRAZDNE;
end DEMO_NAPL_KATEDRY ;
/
--------------------------------------------------------
--  DDL for Procedure DEMO_NAPLN_UCITELE
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE DEMO_NAPLN_UCITELE 
is
--------------------------------------------------------
--  created - Sobota-únor-12-2011   Ivan Halaska
--  dalsi upravy:
-- procedura naplni tabulku DEMO_UCITEL prvotnimi testovacimi daty
-- procedura predpoklada, ze tabulka je prazdna
--------------------------------------------------------
   type T_jmena is varray(25) of Varchar2(15);
   V_JMENA T_JMENA :=T_JMENA('Pavel','Miroslav','Karel','Jan','Michal','Eva','Hanka'
                           ,'Robert','Milada','Markéta','Ivana','Libuše','Zdeňka','Karolína'
                           ,'Adéla','Jiří','Martin','Josef','Ivan','Věra','Milan');
   type T_UCITELE is table of DEMO_UCITEL%ROWTYPE index by PLS_INTEGER;
   V_UCITELE                    T_UCITELE;
   V_UCITELE_PRAZDNE  T_UCITELE;
   C_POCET_UCITELU PLS_INTEGER :=NAPLN_DATA.C_POCET_UCITELU;
   V_POM pls_integer;
begin
select COUNT(*) into V_POM from DEMO_UCITEL;
if V_POM &gt; 0 then
   DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_UCITEL není prázdná, končím');
   return;
end if;
for V_PAR  in 1..C_POCET_UCITELU LOOP
V_UCITELE(V_PAR).UCITEL_ID :=  V_PAR;
V_UCITELE(V_PAR).JMENO :=  v_jmena(TRUNC(DBMS_RANDOM.value(1,20)));
V_UCITELE(V_PAR).PRIJMENI :=  'Příjmení-' ||V_PAR ;
V_UCITELE(V_PAR).katedra_id:=1800+TRUNC(dbms_random.value(1,NAPLN_DATA.C_POCET_KATEDER));                                                      
V_UCITELE(V_PAR).TITUL := case TRUNC(DBMS_RANDOM.value(1,4)) 
                               when  0 then null
                               when 1 then 'Ing.'
                               when 2 then 'Doc. Ing.'
                               when 3 then 'Prof. Ing.'
                               else NULL
                          end;
end LOOP;
------------------------------------------------------------------------------------------------
/*  pro kontrolu lze pole vypsat
for I in 1 ..V_UCITELE.COUNT LOOP
if V_UCITELE.exists(I) then
DBMS_OUTPUT.PUT_LINE(V_UCITELE(I).TITUL||' '||V_UCITELE(I).JMENO||' '||V_UCITELE(I).PRIJMENI);
else DBMS_OUTPUT.PUT_LINE(V_UCITELE.count);
end if;
end LOOP;
*/
------------------------------------------------------------------------------------------------
begin
  FORALL X in INDICES of  V_UCITELE SAVE exceptions
   insert into DEMO_UCITEL values  V_UCITELE(X); 
  commit;
exception
  when napln_data.DML_ERRORS then dump_bulk_exceptions;
end;
-- uklidim
V_UCITELE := V_UCITELE_PRAZDNE;
end DEMO_NAPLN_UCITELE ;
/
--------------------------------------------------------
--  DDL for Procedure DEMO_NAPLN_PREDMETY
--------------------------------------------------------
  CREATE OR REPLACE PROCEDURE DEMO_NAPLN_PREDMETY 
is
--  created - Sobota-únor-12-2011   Ivan Halaska
-- procedura naplni testovaci data do tabulky DEMO_PREDMET. 
-- Procedura probehne pouze tehdy, je-li tabulka prazdna
-- predpokladem je, ze uz je naplnena tabulka DEMO_UCITEL a tabulka DEMO_PREDMET je jeste prazdna
type T_PREDMETY  is table of DEMO_PREDMET%ROWTYPE index by PLS_INTEGER;
V_PREDMETY   T_PREDMETY;
v_PREDMETY_PRAZDNE T_PREDMETY;
type T_UCITEL_KATEDRA_POLE_REC is RECORD (UCITEL_ID DEMO_UCITEL.UCITEL_ID%type,KATEDRA_ID DEMO_UCITEL.KATEDRA_ID%type);
type T_UCITEL_KATEDRA_POLE is table of T_UCITEL_KATEDRA_POLE_REC;
V_UCITEL_KATEDRA_POLE  T_UCITEL_KATEDRA_POLE;
V_UCITEL_KATEDRA_POLE_PRAZDNE  T_UCITEL_KATEDRA_POLE;
type T_UCITEL_ID is table of DEMO_UCITEL.UCITEL_ID%type  index by PLS_INTEGER;
V_UCITEL_ID   T_UCITEL_ID;
C_POCET_PREDMETU  SIMPLE_INTEGER := NAPLN_DATA.C_POCET_PREDMETU;
V_POM PLS_INTEGER :=0;
begin
select COUNT(*) into V_POM from DEMO_PREDMET;
if V_POM &gt; 0 then
   DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_PREDMET není prázdná, končím');
   return;
end if;
-- pripravim si pomocne pole pro zajisteni, aby garant byl z katedry, ktera za predmet zodpovida
-- predpokladem je, ze uz je naplnena tabulka DEMO_UCITEL
select UCITEL_ID,KATEDRA_ID bulk collect into V_UCITEL_KATEDRA_POLE from DEMO_UCITEL;
if V_UCITEL_KATEDRA_POLE.COUNT=0 
  then  DBMS_OUTPUT.PUT_LINE(
            'aby bylo možné touto procedurou naplnit tabulku DEMO_PREDMET, musí být naplněna tabulka DEMO_UCITEL.');
            DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_UCITEL není je prázdná, končím'); return;
end if;  
for V_PAR  in 1..C_POCET_PREDMETU LOOP
V_PREDMETY(V_PAR).PREDMET_ID:=  V_PAR;
V_PREDMETY(V_PAR).KOD_PREDMETU :=  'BI-'||DBMS_RANDOM.STRING('A', 3);
V_PREDMETY(V_PAR).NAZEV_PREDMETU :=  'NAZEV_PREDMETU'||'_'||V_PREDMETY(V_PAR).KOD_PREDMETU;
V_PREDMETY(V_PAR).ECTS_KREDITY :=FLOOR(DBMS_RANDOM.value(1, 7));
V_PREDMETY(V_PAR).ROZSAH :=TO_CHAR(FLOOR(DBMS_RANDOM.value(1,4)))||' + '||TO_CHAR(FLOOR(DBMS_RANDOM.value(1,3)));
V_PREDMETY(V_PAR).SEMESTR_L_Z := case MOD(V_PAR, 3) 
                                      when 1 then 'Z'
                                      when 2 then 'L'
                                      else 'Z,L'
                                 end;
-- zajistim platnost IO, ktere predepisuje,  aby garant byl z katedry, ktera za predmet zodpovida
V_POM := FLOOR(DBMS_RANDOM.value(1,V_UCITEL_KATEDRA_POLE.count));
V_PREDMETY(V_PAR).UCITEL_ID := V_UCITEL_KATEDRA_POLE(V_POM).UCITEL_ID;
V_PREDMETY(V_PAR).KATEDRA_ID :=  V_UCITEL_KATEDRA_POLE(V_POM).KATEDRA_ID;
end LOOP;
-- uklidim
V_UCITEL_KATEDRA_POLE :=V_UCITEL_KATEDRA_POLE_PRAZDNE;
-- zapis obsah pole V_PREDMETY do tabulky UCITEL
-----------------------------------------------------------------------------------------
/*
                -- neefektivni plneni
                for X in V_PREDMETY.first ..V_PREDMETY.last  LOOP
                        insert into DEMO_PREDMET values  V_PREDMETY(X) ;
                        commit;                
               end loop;
*/
-----------------------------------------------------------------------------------------
-- efektivnejsi vlozeni pole do tabulky
begin
  FORALL X in INDICES of  V_PREDMETY SAVE exceptions
   insert into DEMO_PREDMET values V_PREDMETY(X); 
commit;
select COUNT(*) into V_POM from DEMO_PREDMET;
DBMS_OUTPUT.PUT_LINE('Do tabulky DEMO_PREDMET bylo vloženo '||V_POM||' řádků');
exception
  when napln_data.DML_ERRORS then DUMP_BULK_EXCEPTIONS;
end;
--uklidim
V_PREDMETY   := V_PREDMETY_PRAZDNE;
end DEMO_NAPLN_PREDMETY ;
/
--------------------------------------------------------
--  DDL for Procedure DEMO_NAPLN_VYPSANE_PREDMETY
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE DEMO_NAPLN_VYPSANE_PREDMETY 
is
--------------------------------------------------------
--  created - Sobota-únor-12-2011    Ivan Halaska
-- upravy: 
-- procedura naplni tabulku  DEMO_VYPSANY_PREDMET az po letni semestr 2010/2011 
-- procedura predpoklada, ze tabulka je prazdna
--------------------------------------------------------
v_pom pls_integer;
begin
select COUNT(*) into V_POM from DEMO_VYPSANY_PREDMET;
if V_POM &gt; 0 then
   DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_VYPSANY_PREDMET není prázdná, končím');
   return;
end if;
insert into DEMO_VYPSANY_PREDMET versions(SEMESTR_ID, PREDMET_ID )
  select s.semestr_id, p.predmet_id
  from demo_predmet P cross join demo_semestr S
  where 
  instr(p.semestr_l_z, SUBSTR(s.nazev_semestru,1,1))&gt; 0
  and s.semestr_id &lt;=102;
commit;
end DEMO_NAPLN_VYPSANE_PREDMETY ;
/
--------------------------------------------------------
--  DDL for Procedure DEMO_NAPLN_VYUCUJICI_PREDMETU
--------------------------------------------------------
CREATE OR REPLACE PROCEDURE DEMO_NAPLN_VYUCUJICI_PREDMETU is
--------------------------------------------------------
--  created - Sobota-únor-12-2011   Ivan Halaska
-- upravy:
-- procedura naplni tabulku DEMO_SEZNAM_UCITELU_PREDMETU prvotnimi daty
-- procedura predpoklada, ze tabulka je prazdna
-- procedura predpoklada, ze uz jsou naplneny tabulky DEMO_UCITEL a DEMO_VYPSANY_PREDMET
--------------------------------------------------------
type T_UC is table of DEMO_UCITEL.UCITEL_ID%type index by PLS_INTEGER;
V_UC                    T_UC;
V_UC_PRAZDNE  T_UC;
V_POM PLS_INTEGER :=1;
V_I PLS_INTEGER:=1;
subtype t_spu_rec is DEMO_SEZNAM_UCITELU_PREDMETU%rowtype;
type T_SPU_POLE is table of T_SPU_REC index by PLS_INTEGER;
V_SPU_POLE                   T_SPU_POLE;
V_SPU_POLE_PRAZDNE T_SPU_POLE;
begin
-------------------------------------------------------------------------------------------------------------
-- overeni prepdpokladu
declare 
v_koncim Boolean :=FALSE;
begin 
  select COUNT(*) into V_POM from DEMO_SEZNAM_UCITELU_PREDMETU;
  if V_POM &gt; 0 then 
     DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_SEZNAM_UCITELU_PREDMETU není prázdná, konèím');
     v_koncim:=TRUE;
  end if;
  select COUNT(*) into V_POM from DEMO_UCITEL;
  if V_POM = 0 then 
     DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_UCITEL je prázdná, konèím');
     v_koncim:=TRUE;
  end if;
  select COUNT(*) into V_POM from DEMO_VYPSANY_PREDMET;
  if V_POM = 0 then 
     DBMS_OUTPUT.PUT_LINE('Tabulka DEMO_VYPSANY_PREDMET je prázdná, konèím');
     v_koncim:=TRUE;
  end if;
if v_koncim then return; end if;
end;
-------------------------------------------------------------------------------------------------------------
-- nactu do pameti id-cka vsech ucitelu
select ucitel_id bulk collect into v_uc from DEMO_UCITEL;
  DBMS_OUTPUT.disable;
  dbms_output.enable(NULL);
dbms_output.put_line('zacinam ...');
For p_rec in 
    (select 'ANO' CVICI,'ANO' PREDNASI, 'ANO'  ZKOUSI ,UCITEL_ID, SEMESTR_ID, PREDMET_ID
     from (select  FLOOR(DBMS_RANDOM.value(1,NAPLN_DATA.POCET_UCITELU -10)) UCITEL_ID, SEMESTR_ID, PREDMET_ID 
           from DEMO_VYPSANY_PREDMET VP)) loop
V_POM :=FLOOR(DBMS_RANDOM.value(1,V_UC.COUNT-10));
v_spu_pole(v_i):=p_rec; 
--------------------------------------------------------------------------------------------------------------
-- ladici tisk
/*
dbms_output.put('v_uc.count= '||V_UC.COUNT||', '||'v_pom= '||v_pom);
dbms_output.put_line(', '||'v_uc('||v_pom||')= '||case v_uc.exists(v_pom) when TRUE then v_uc(v_pom) else 'NIC' end  );
dbms_output.put_line('p_rec='||p_rec.cvici||', '||p_rec.prednasi||', '||p_rec.zkousi||', '||p_rec.ucitel_id||', '||p_rec.semestr_id||', '||p_rec.predmet_id);
 dbms_output.put_line('v_spu_pole('||v_i||')= '||v_spu_pole(v_i).cvici||' '||v_spu_pole(v_i).prednasi||' '||
                       v_spu_pole(v_i).zkousi||' '||v_spu_pole(v_i).ucitel_id||' '||v_spu_pole(v_i).semestr_id||' '||v_spu_pole(v_i).predmet_id);
*/
--------------------------------------------------------------------------------------------------------------
-- pripravim napln tabulky DEMO_SEZNAM_UCITELU_PREDMETU v poli v_spu_pole
v_i:=v_i+1;
v_spu_pole(v_i):=p_rec;
v_spu_pole(v_i).UCITEL_ID:=v_spu_pole(v_i-1).UCITEL_ID + 2;
v_spu_pole(v_i).CVICI:='ANO';
v_spu_pole(v_i).PREDNASI:='NE';
V_SPU_POLE(V_I).ZKOUSI:='NE';
-- ladici tisk -------------------------------------------------------------------------------------------------
-- dbms_output.put('v_spu_pole('||v_i||')= '||v_spu_pole(v_i).cvici||' '||v_spu_pole(v_i).prednasi||' ');
-- dbms_output.put_line(v_spu_pole(v_i).zkousi||' '||v_spu_pole(v_i).ucitel_id||' '||v_spu_pole(v_i).semestr_id||' '||v_spu_pole(v_i).predmet_id);
-- ladici tisk konec -------------------------------------------------------------------------------------------------
v_i:=v_i+1;
v_spu_pole(v_i):=p_rec;
v_spu_pole(v_i).UCITEL_ID:=v_spu_pole(v_i-2).UCITEL_ID + 4;
v_spu_pole(v_i).CVICI:='ANO';
v_spu_pole(v_i).PREDNASI:='NE';
V_SPU_POLE(V_I).ZKOUSI:='NE';
-- ladici tisk -------------------------------------------------------------------------------------------------
-- dbms_output.put_line('v_spu_pole('||v_i||')= '||v_spu_pole(v_i).cvici||' '||v_spu_pole(v_i).prednasi||' '||
--                       v_spu_pole(v_i).zkousi||' '||v_spu_pole(v_i).ucitel_id||' '||v_spu_pole(v_i).semestr_id||' '||v_spu_pole(v_i).predmet_id);
-- ladici tisk konec -------------------------------------------------------------------------------------------------
v_i:=v_i+1;
end LOOP;
--------------------------------------------------------------------------------------------------------------
-- ladici tisk
/*
 dbms_output.put_line('v_spu_pole ma '||v_spu_pole.count); 
v_pom:=v_spu_pole.count;
for i in v_spu_pole.first .. v_spu_pole.first+100 LOOP
  if v_spu_pole.exists(i) then dbms_output.put_line(v_spu_pole(i).cvici||' '||v_spu_pole(i).prednasi||' '||
                       v_spu_pole(i).zkousi||' '||v_spu_pole(i).ucitel_id||' '||v_spu_pole(i).semestr_id||' '||v_spu_pole(i).predmet_id); 
  end if;
END LOOP ;
*/
-- konec ladiciho tisku
-----------------------------------------------------------------------------------------
-- zapisi obsah pole v_spu_pole do tabulky  demo_seznam_ucitelu_predmetu
begin
  FORALL X in indices of v_spu_pole SAVE exceptions
   insert into demo_seznam_ucitelu_predmetu values  v_spu_pole(X); 
  commit;
exception
  when napln_data.DML_ERRORS then 
  dump_bulk_exceptions;
end; 
commit;
-----------------------------------------------------------------------------------------
-- uklidim
V_SPU_POLE := V_SPU_POLE_PRAZDNE; 
V_UC:= V_UC_PRAZDNE;
end DEMO_NAPLN_VYUCUJICI_PREDMETU;
/
        </proc_sql>

        <title4>Test</title4>

        <para>Vymažu data ze všech tabulek.</para>

        <para>- ujistím se, že jsou prázdné</para>

        <para>- spustím script, ve které postupně spustím všechny procedury pro naplnění jednotlivých tabulek.</para>

        <para>-opatřím naplněné tabulky a indexu objektovými statistikami pro optimalizátor</para>

        <para>- ověřím si, že jsou tabulky naplněné</para>

        <title4>Záznam o proběhlém testu (log):</title4>

        <proc_log>&gt; set SERVEROUTPUT on size unlimited
&gt; BEGIN
  vypni_cizi_klice;
 execute immediate 'truncate table DEMO_SEZNAM_UCITELU_PREDMETU drop storage';
 execute immediate 'truncate table DEMO_VYPSANY_PREDMET drop storage';
 execute immediate 'truncate table DEMO_PREDMET drop storage';
 execute immediate 'truncate table DEMO_UCITEL drop storage';
 execute immediate 'truncate table DEMO_KATEDRA drop storage';
 execute immediate 'truncate table DEMO_SEMESTR drop storage';
ZAPNI_CIZI_KLICE;
end;
anonymous block completed
&gt; -- naplnim data do dabulek a zanalyzuji
&gt; BEGIN
  NAPLN_DATA.NAPLN_VSECHNY_TABULKY  ;  
  end;
anonymous block completed
zacinam ...
Koncim, ...
&gt; --
&gt; -- sběr statistik nad objekty mého schématu
&gt; begin 
  DBMS_STATS.GATHER_SCHEMA_STATS (OWNNAME =&gt; user,estimate_percent =&gt; 100);
  end;
/
anonymous block completed
&gt; --
&gt; -- podivam se, zda jsou tabulky naplneny, protoze jsou cerstve analyzovany se 100% vzorkem,
&gt; -- lze se podivat do statistik
&gt; select TABLE_NAME, NUM_ROWS
  from USER_TABLES
  where TABLE_NAME like 'DEMO%'
  TABLE_NAME                     NUM_ROWS               
  ------------------------------ ---------------------- 
  DEMO_KATEDRA                   20                   
  DEMO_PREDMET                   1000               
  DEMO_SEMESTR                   26                   
  DEMO_SEZNAM_UCITELU_PREDMETU   7998               
  DEMO_UCITEL                    700                 
  DEMO_VYPSANY_PREDMET 2666               

  6 rows selected 
       </proc_log>

        <title4>Diskuse výsledku testu</title4>

        <para>Pro případ opakovaného spuštění provádím na začátku vymazání dat z tabulek pomocí operace TRUNCATE. Aby
        bylo možné data smazat, je třreba před tím vypnout kountrolu cizích klíčů a po vymazání ji zase zapnout. V
        plnicících procedurách je vhodné se vyhnout DML operacím s jedním řádkem uvnitř těla cyklu. Proto jsem náplň
        nejdříve připravil do pole a potom použil FORALL příkaz.</para>

        <title4>Závěr z testování</title4>

        <para>Test ověřil očekávané chování modulu pro naplnění tabulek testovacími daty.</para>
      </proc_object>

      <proc_object>
        <title3>1. Modul AAAA</title3>

        <para>Verbální specifikace modulu</para>

        <title4>Zdrojový text modulu</title4>

        <proc_sql>
          aaaaaaaa
        </proc_sql>

        <title4>Test</title4>

        <para>slovní specifikace struktury testu pro ověření fukčnosti o n krocích n-tý krok testu:</para>

        <para>- podívám se na současný stav relevantního fragmentu dat před testem</para>

        <para>- provedu pokus o provedení toho a toho ukonu, po provedeni očekávám, že v databázi nastanou ty a ty změny
        nebo pokus bude odmitnut z toho a toho důvodu</para>

        <para>- pro ověření se podívám na stav relevantního fragmentu dat po akci</para>

        <title4>Záznam o proběhlém testu (log):</title4>

        <proc_log>
          bbbbbbb
        </proc_log>

        <title4>Diskuse výsledku testu</title4>

        <para>Diskuse ....</para>

        <title4>Závěr z testování</title4>

        <para>Test NEověřil očekávané chování podprogramu/triggeru</para>
      </proc_object>

      <proc_object>
        <title3>2. Modul pro kontrolu přidaného IO2</title3>

        <para>Znění IO2: Garantem předmětu musí být učitel z katedry, která za předmět zodpovídá. Možnou nekonzistenci,
        kterou navozuje levá smyčka ve schématu budu kontrolovat pomocí databázového trigeru.</para>

        <title4>Zdrojový text modulu</title4>

        <proc_sql>
        create or replace TRIGGER KONTROLA_PUVODU_GARANTA 
FOR INSERT OR UPDATE OF UCITEL_ID,KATEDRA_ID ON DEMO_PREDMET 
COMPOUND TRIGGER
type t_ucitel_s_puvodem is record (v_ucitel_id demo_ucitel.ucitel_id%type, v_katedra_id demo_ucitel.katedra_id%type);
type t_ucitele_s_puvodem is table of t_ucitel_s_puvodem index by pls_integer;
v_ucitele_s_puvodem t_ucitele_s_puvodem;
v_ucitele_s_puvodem_prazdne t_ucitele_s_puvodem;
type t_katedry_ucitelu is table of demo_ucitel.katedra_id%type index by pls_integer;
v_katedry_ucitelu t_katedry_ucitelu;
v_katedry_ucitelu_prazdne t_katedry_ucitelu;
V_KATEDRA_GARANTA_ID demo_ucitel.katedra_id%type;
v_ucitel_id demo_ucitel.ucitel_id%type;
v_i pls_integer;
BEFORE STATEMENT IS
begin
dbms_output.put_line('before statement compound');
select ucitel_id, katedra_id bulk collect into v_ucitele_s_puvodem from demo_ucitel;
for i in v_ucitele_s_puvodem.first .. v_ucitele_s_puvodem.last 
-- presunu do pole, kde ucitel bude indexem
  LOOP
    v_ucitel_id := v_ucitele_s_puvodem(i).v_ucitel_id;
--    dbms_output.put_line(v_ucitel_id);
    v_katedry_ucitelu(v_ucitel_id) := v_ucitele_s_puvodem(i).v_katedra_id;
  end loop;
--  trasovaci tisk 
/*
  declare
  i integer;
  begin
   i:= v_katedry_ucitelu.first;
   LOOP
    dbms_output.put_line('v_katedry_ucitelu('||i||')= '||v_katedry_ucitelu(i));
    exit when i = v_katedry_ucitelu.last;
    i:= v_katedry_ucitelu.next(i);
   END LOOP ;
  end;
*/
END BEFORE STATEMENT;
--
BEFORE  EACH ROW IS
begin
dbms_output.put_line('before each row compound');
dbms_output.put_line(':OLD.ucitel_id= '||:OLD.ucitel_id||', :NEW.ucitel_id= '||:NEW.ucitel_id);
dbms_output.put_line(':OLD.katedra_id= '||:OLD.katedra_id||', :NEW.katedra_id ='||:NEW.katedra_id);
END BEFORE EACH ROW;
--
AFTER  EACH ROW IS
begin
dbms_output.put_line('after each row compound');
dbms_output.put_line(':OLD.ucitel_id = '||:OLD.ucitel_id||',  :NEW.ucitel_id = '||:NEW.ucitel_id);
dbms_output.put_line(':OLD.katedra_id= '||:OLD.katedra_id||', :NEW.katedra_id ='||:NEW.katedra_id);
v_i := :new.UCITEL_ID;
if v_i is NULL then dbms_output.put_line('jdi do zelĂ­');  end if;
  V_KATEDRA_GARANTA_ID := v_katedry_ucitelu(v_i);
dbms_output.put_line('novĂ˝m garantem by mÄ›l bĂ˝t '||v_i||', jeho katedra je  '||V_KATEDRA_GARANTA_ID);
  if :new.KATEDRA_ID  &lt;&gt; V_KATEDRA_GARANTA_ID 
  Then RAISE_APPLICATION_ERROR(-20001, 'Garantem pĹ™edmÄ›tu '|| :new.kod_predmetu||' nesmĂ­ bĂ˝t uÄŤitel z katedry '
                                    ||V_KATEDRA_GARANTA_ID||', kterĂˇ nezodpovĂ­dĂˇ za tento pĹ™edmÄ›t');
  end if;
END AFTER EACH ROW;
--
AFTER STATEMENT IS
begin
dbms_output.put_line('after statement');

-- uklidim pamet po prvnim poli kateder
v_katedry_ucitelu := v_katedry_ucitelu_prazdne;
END AFTER STATEMENT;
--
end KONTROLA_PUVODU_GARANTA;
        </proc_sql>

        <title4>Test</title4>

        <para>slovní specifikace struktury testu pro ověření fukčnosti o n krocích n-tý krok testu:</para>

        <para>- podívám se na současný stav relevantního fragmentu dat před testem</para>

        <para>- provedu pokus o provedení toho a toho ukonu, po provedeni očekávám, že v databázi nastanou ty a ty změny
        nebo pokus bude odmitnut z toho a toho důvodu</para>

        <para>- pro ověření se podívám na stav relevantního fragmentu dat po akci</para>

        <title4>Záznam o proběhlém testu (log):</title4>

        <proc_log>set echo on
set serveroutput on size unlimited
-- podívám se na momentální stav řádku
select *
from DEMO_PREDMET
where predmet_id = 382;
-- pokusím se porušit IO tím, že změním garanta předmětu a ponechám původní katedru předmětu,
-- na kterou nový garant nepatří
UPDATE DEMO_PREDMET
  SET UCITEL_ID = 341, KATEDRA_ID = 1819
WHERE predmet_id = 382;
-- podívám se stav řádku po pokusu
select *
from DEMO_PREDMET
where predmet_id = 382;
rollback;
--===========================  Odezva ============================================
&gt; set serveroutput on size unlimited
&gt; -- podívám se na momentální stav řádku
&gt; select *
from DEMO_PREDMET
where predmet_id = 382
PREDMET_ID             KOD_PREDMETU NAZEV_PREDMETU                 ECTS_KREDITY           ROZSAH     UCITEL_ID              KATEDRA_ID             SEMESTR_L_Z 
---------------------- ------------ ------------------------------ ---------------------- ---------- ---------------------- ---------------------- ----------- 
382                    BI-JyX       NAZEV_PREDMETU_BI-JyX          6                      3 + 2      129                    1819                   Z           

&gt; -- pokusím se porušit IO tím, že změním garanta předmětu a ponechám původní katedru předmětu,
&gt; -- na kterou nový garant nepatří
&gt; UPDATE DEMO_PREDMET
  SET UCITEL_ID = 341, KATEDRA_ID = 1819
  WHERE predmet_id = 382

Error starting at line 9 in command:
UPDATE DEMO_PREDMET
  SET UCITEL_ID = 341, KATEDRA_ID = 1819
  WHERE predmet_id = 382
Error report:
SQL Error: ORA-20001: Garantem předmětu BI-JyX nesmí být učitel z katedry 1816, která nezodpovídá za tento předmět
ORA-06512: na "HALASKA.KONTROLA_PUVODU_GARANTA", line 55
ORA-04088: chyba během provádění triggeru 'HALASKA.KONTROLA_PUVODU_GARANTA'

&gt; -- podívám se stav řádku po pokusu
&gt; select *
from DEMO_PREDMET
where predmet_id = 382
PREDMET_ID             KOD_PREDMETU NAZEV_PREDMETU                 ECTS_KREDITY           ROZSAH     UCITEL_ID              KATEDRA_ID             SEMESTR_L_Z 
---------------------- ------------ ------------------------------ ---------------------- ---------- ---------------------- ---------------------- ----------- 
382                    BI-JyX       NAZEV_PREDMETU_BI-JyX          6                      3 + 2      129                    1819                   Z           

&gt; rollback
rollback complete.

        </proc_log>

        <title4>Diskuse výsledku testu</title4>

        <para>Diskuse...</para>

        <title4>Závěr z testování</title4>

        <para>Závěr ...</para>
      </proc_object>

      <proc_object>
        <title3>2. Modul CCCC</title3>

        <para>Verbální specifikace modulu</para>

        <title4>Zdrojový text modulu</title4>

        <proc_sql>
          zzzzzzzzz
        </proc_sql>

        <title4>Test</title4>

        <para>slovní specifikace struktury testu pro ověření fukčnosti o n krocích n-tý krok testu:</para>

        <para>a. podívám se na současný stav relevantního fragmentu dat před testem</para>

        <proc_log>
          aaaaa aaaaa
        </proc_log>

        <para>b. provedu pokus o provedení toho a toho ukonu, po provedeni očekávám, že v databázi nastanou ty a ty
        změny nebo pokus bude odmitnut z toho a toho důvodu</para>

        <proc_log>
          bbbbb bbbbb
        </proc_log>

        <para>c. pro ověření se podívám na stav relevantního fragmentu dat po akci</para>

        <proc_log>
          ccccc ccccc
        </proc_log>

        <title4>Záznam o proběhlém testu (log):</title4>

        <proc_log>
          bbbbbbbbb
        </proc_log>

        <title4>Diskuse výsledku testu</title4>

        <para>Diskuse...</para>

        <title4>Závěr z testování</title4>

        <para> ... </para>
      </proc_object>
    </proc_objects>

    <script>
      <title>Celkový script</title>
      <comment>
      <para> Celkový script obsahuje příkazy pro vytvoření tabulek a proc. objektů, příkazy pro naplnění tabulek, všechny dotazy (čísla dotazů, a české znění je v komentáři před dotazem) a příkazy testů procedurálních objektů (před každým testem je komentář se scénářem testu).
Na začátek scriptu dejte příkaz:
          SET ECHO ON
          SPOOL protokol.txt
Na konec scriptu dejte příkaz
          SPOOL OFF           
      </para> </comment>
      <para>       <link url="https://users.fit.cvut.cz/~halaska/BI-SQL/Cviceni5/celkovy_script_pro_stvoreni_schematu_vcetne_naplneni_dat.sql.html">odkaz na celkový script </link> </para> 
      <para>       <link url="???">odkaz na protokol o zpracování předchozí celkové dávky </link> </para> 
    </script>

    <conclussions>
      <title>Závěr</title>

      <para>Alespoň jeden odstavec, kde zhodnotíte problematiku semestrálky, problémy, které jste řešil a nabitou zkušenost.</para>
    </conclussions>

    <references>
      <title>Odkazy</title>

      <para>[1] <link url="https://edux.fit.cvut.cz/courses/BI-SQL/">Stránky předmětu SQL </link></para>
    </references>
  </content>
</sproject_sql>
